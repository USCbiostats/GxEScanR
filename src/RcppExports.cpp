// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// GetBinaryDosageInformation
Rcpp::List GetBinaryDosageInformation(const std::string& binaryDosageFilename, const unsigned int snSub, const unsigned int snSNPs);
RcppExport SEXP _GxEScanR_GetBinaryDosageInformation(SEXP binaryDosageFilenameSEXP, SEXP snSubSEXP, SEXP snSNPsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type binaryDosageFilename(binaryDosageFilenameSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type snSub(snSubSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type snSNPs(snSNPsSEXP);
    rcpp_result_gen = Rcpp::wrap(GetBinaryDosageInformation(binaryDosageFilename, snSub, snSNPs));
    return rcpp_result_gen;
END_RCPP
}
// GxEScanC
int GxEScanC(Rcpp::List subjectData, Rcpp::List geneticInfo, std::string outputFilename, std::string skippedFilename, double minMaf, double geCutoff);
RcppExport SEXP _GxEScanR_GxEScanC(SEXP subjectDataSEXP, SEXP geneticInfoSEXP, SEXP outputFilenameSEXP, SEXP skippedFilenameSEXP, SEXP minMafSEXP, SEXP geCutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type subjectData(subjectDataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type geneticInfo(geneticInfoSEXP);
    Rcpp::traits::input_parameter< std::string >::type outputFilename(outputFilenameSEXP);
    Rcpp::traits::input_parameter< std::string >::type skippedFilename(skippedFilenameSEXP);
    Rcpp::traits::input_parameter< double >::type minMaf(minMafSEXP);
    Rcpp::traits::input_parameter< double >::type geCutoff(geCutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(GxEScanC(subjectData, geneticInfo, outputFilename, skippedFilename, minMaf, geCutoff));
    return rcpp_result_gen;
END_RCPP
}
// GxEScanCSubset
int GxEScanCSubset(Rcpp::List subjectData, Rcpp::List geneticInfo, std::string outputFilename, std::string skippedFilename, double minMaf, double geCutoff, std::vector<int>& snpIndices);
RcppExport SEXP _GxEScanR_GxEScanCSubset(SEXP subjectDataSEXP, SEXP geneticInfoSEXP, SEXP outputFilenameSEXP, SEXP skippedFilenameSEXP, SEXP minMafSEXP, SEXP geCutoffSEXP, SEXP snpIndicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type subjectData(subjectDataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type geneticInfo(geneticInfoSEXP);
    Rcpp::traits::input_parameter< std::string >::type outputFilename(outputFilenameSEXP);
    Rcpp::traits::input_parameter< std::string >::type skippedFilename(skippedFilenameSEXP);
    Rcpp::traits::input_parameter< double >::type minMaf(minMafSEXP);
    Rcpp::traits::input_parameter< double >::type geCutoff(geCutoffSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type snpIndices(snpIndicesSEXP);
    rcpp_result_gen = Rcpp::wrap(GxEScanCSubset(subjectData, geneticInfo, outputFilename, skippedFilename, minMaf, geCutoff, snpIndices));
    return rcpp_result_gen;
END_RCPP
}
// GxETest
int GxETest();
RcppExport SEXP _GxEScanR_GxETest() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(GxETest());
    return rcpp_result_gen;
END_RCPP
}
// GxEScanFreqC
int GxEScanFreqC(Rcpp::List subjectData, Rcpp::List geneticInfo, std::string outputFilename);
RcppExport SEXP _GxEScanR_GxEScanFreqC(SEXP subjectDataSEXP, SEXP geneticInfoSEXP, SEXP outputFilenameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type subjectData(subjectDataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type geneticInfo(geneticInfoSEXP);
    Rcpp::traits::input_parameter< std::string >::type outputFilename(outputFilenameSEXP);
    rcpp_result_gen = Rcpp::wrap(GxEScanFreqC(subjectData, geneticInfo, outputFilename));
    return rcpp_result_gen;
END_RCPP
}
// GxEScanFreqC2
int GxEScanFreqC2(Rcpp::List subjectData, Rcpp::List geneticInfo, std::string outputFilename);
RcppExport SEXP _GxEScanR_GxEScanFreqC2(SEXP subjectDataSEXP, SEXP geneticInfoSEXP, SEXP outputFilenameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type subjectData(subjectDataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type geneticInfo(geneticInfoSEXP);
    Rcpp::traits::input_parameter< std::string >::type outputFilename(outputFilenameSEXP);
    rcpp_result_gen = Rcpp::wrap(GxEScanFreqC2(subjectData, geneticInfo, outputFilename));
    return rcpp_result_gen;
END_RCPP
}
// Imp2toBDC
int Imp2toBDC(const Rcpp::List& imp2Info, const std::string& filename, int format, int subformat);
RcppExport SEXP _GxEScanR_Imp2toBDC(SEXP imp2InfoSEXP, SEXP filenameSEXP, SEXP formatSEXP, SEXP subformatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type imp2Info(imp2InfoSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< int >::type format(formatSEXP);
    Rcpp::traits::input_parameter< int >::type subformat(subformatSEXP);
    rcpp_result_gen = Rcpp::wrap(Imp2toBDC(imp2Info, filename, format, subformat));
    return rcpp_result_gen;
END_RCPP
}
// PlinkBinaryInfo
Rcpp::List PlinkBinaryInfo(std::string& geneticFile, std::string& mapFile, std::string& familyFile);
RcppExport SEXP _GxEScanR_PlinkBinaryInfo(SEXP geneticFileSEXP, SEXP mapFileSEXP, SEXP familyFileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string& >::type geneticFile(geneticFileSEXP);
    Rcpp::traits::input_parameter< std::string& >::type mapFile(mapFileSEXP);
    Rcpp::traits::input_parameter< std::string& >::type familyFile(familyFileSEXP);
    rcpp_result_gen = Rcpp::wrap(PlinkBinaryInfo(geneticFile, mapFile, familyFile));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_GxEScanR_GetBinaryDosageInformation", (DL_FUNC) &_GxEScanR_GetBinaryDosageInformation, 3},
    {"_GxEScanR_GxEScanC", (DL_FUNC) &_GxEScanR_GxEScanC, 6},
    {"_GxEScanR_GxEScanCSubset", (DL_FUNC) &_GxEScanR_GxEScanCSubset, 7},
    {"_GxEScanR_GxETest", (DL_FUNC) &_GxEScanR_GxETest, 0},
    {"_GxEScanR_GxEScanFreqC", (DL_FUNC) &_GxEScanR_GxEScanFreqC, 3},
    {"_GxEScanR_GxEScanFreqC2", (DL_FUNC) &_GxEScanR_GxEScanFreqC2, 3},
    {"_GxEScanR_Imp2toBDC", (DL_FUNC) &_GxEScanR_Imp2toBDC, 4},
    {"_GxEScanR_PlinkBinaryInfo", (DL_FUNC) &_GxEScanR_PlinkBinaryInfo, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_GxEScanR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
