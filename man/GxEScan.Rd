% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/GxEScan.R
\name{GxEScan}
\alias{GxEScan}
\title{GxEScan - Perform a genomewide interaction scan}
\usage{
GxEScan(subjectData, geneticData, outFile, skipFile = "",
  popminMaf = 0.01, sampleminMaf = 0.05, binCov = TRUE, snps,
  errorOut = "")
}
\arguments{
\item{subjectData}{Data frame with subject data
First column must be a character string
If second column is a character string, the first column is the
is the family ID and the second column is the subject ID otherwise
the first column is the subject
The column following the subject ID is the subject's phenotype
this column must be a numeric value and not an integer
The remian columns are the covariates values. These must be numeric
values. The covariate in the last column is the covariate interacting
with the gene.}

\item{geneticData}{List with information on reading genetic data
This is returned from BianryDosage::GetGeneticInfo}

\item{outFile}{Name of file to write the results to}

\item{skipFile}{Name of file to write info about SNPs that were skipped. If this is blank
no file is written. If this is the same as outFile, the skipped SNPs
are written to the output file.}

\item{popminMaf}{Population minimum allele frequency}

\item{sampleminMaf}{Sample minimum allele frequency}

\item{binCov}{Indicator if covariate interacting with the gene is a binary value. The
default value is TRUE.}

\item{snps}{Vector of snps to be tested. Can either me a character vector of SNP names
or a vector of indices.}

\item{errorOut}{The name of the file to output additional information about an error that
caused the scan to terminate unexpectedly. If this is set to "", no additional
error information is output.}
}
\value{
0 - success
1 - failure
}
\description{
GxEScan - Perform a genomewide interaction scan
}
\examples{
subjectData <- simSubjectData
geneticData <- simGeneticData
geneticData$filename <- system.file("extdata", simGeneticData$filename, package = "GxEScanR")
outFile = "stdout"
skipFile = ""
popminMaf = 0.05
sampleminMaf = 0.1
binCov = TRUE
snps = 1L:110L
GxEScan(subjectData, geneticData, outFile, skipFile, popminMaf, sampleminMaf, binCov, snps)
}
